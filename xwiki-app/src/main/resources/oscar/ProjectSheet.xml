<?xml version='1.0' encoding='UTF-8'?>
<xwikidoc version="1.2" reference="oscar.ProjectSheet" locale="">
  <web>oscar</web>
  <name>ProjectSheet</name>
  <language/>
  <defaultLanguage>en</defaultLanguage>
  <translation>0</translation>
  <creator>XWiki.slauriere</creator>
  <creationDate>1445877406000</creationDate>
  <parent>oscar.Project</parent>
  <author>XWiki.slauriere</author>
  <contentAuthor>XWiki.slauriere</contentAuthor>
  <date>1466022961000</date>
  <contentUpdateDate>1466022961000</contentUpdateDate>
  <version>3.1</version>
  <title>$!doc.getValue("name")</title>
  <comment>Rollback to version 1.40</comment>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{velocity}}
#macro(ommAverage $omm $indicators)
  #set($sum = 0)
  #foreach($indicator in $indicators)
    #set($value = $omm.getValue($indicator))
    #set($sum = $sum + $mathtool.toInteger($value))
  #end
  #set($avg = $mathtool.roundTo(1,$mathtool.div($sum,$indicators.size())))
  $mathtool.toDouble($avg)
#end
#macro(ommEqualsOneCount $omm $indicators)
  #set($counter = 0)
  #foreach($indicator in $indicators)
    #set($value = $omm.getValue($indicator))
    #set($score = $mathtool.toInteger($value))
    #if($score == 1) #set($counter = $counter + 1) #end
  #end
  $counter
#end
#set($ommLcs = 0) #set($ommPdoc = 0) #set($ommStd = 0) #set($ommQtp = 0) #set($ommEnv = 0) #set($ommDfct = 0) #set($ommMst = 0) #set($ommCm = 0) #set($ommPp = 0) #set($ommReqm = 0) #set($ommRdmp = 0) #set($ommStk = 0)
#set($class = $doc.getObject('oscar.Project').xWikiClass)
#set($status =  $doc.getObject("oscar.Project").getValue("status"))
{{html wiki="true"}}
&lt;div>
  &lt;ul class="nav nav-tabs" role="tablist">
    &lt;li role="presentation" class="active">&lt;a href="#overview" aria-controls="overview" role="tab" data-toggle="tab">Overview&lt;/a>&lt;/li>
    #if($status == "mature")
      &lt;li role="presentation">&lt;a href="#forge-tools" aria-controls="forge-tools" role="tab" data-toggle="tab">Quality Metrics&lt;/a>&lt;/li>
      #if($context.action == "view")
        &lt;li role="presentation">&lt;a href="#risk-drivers" aria-controls="risk-drivers" role="tab" data-toggle="tab">Risk Drivers&lt;/a>&lt;/li>
        &lt;li role="presentation">&lt;a href="#risk-indicators" aria-controls="risk-indicators" role="tab" data-toggle="tab">Risk Assessment&lt;/a>&lt;/li>
      #end
    #end
  &lt;/ul>

  &lt;div class="tab-content">
     &lt;div role="tabpanel" class="tab-pane active" id="overview">
     (% class="project-summary-table" %)
     #if($context.action == "view")
     |(% colspan="2" %)//$doc.display("tagline")//
     #set($logo = $doc.getObject("oscar.Project").getValue("logo"))
     |(% colspan="2" %)#if($logo &amp;&amp; $logo.length()>0)[[image:$doc.display("logo")||align="right" style="margin-left:1em;"]]#end $doc.display("description")
     #else
     |=Name|$doc.display("name")
     |=Tagline|$doc.display("tagline")
     |=Logo|$doc.display("logo")
     |=Description|$doc.display("description")
     #end
     #set($fProps = ["url", "leaders", "category", "releases", "status", "licenses", "vcs", "issueTrackerUrl", "discussionChannels", "datasheets", "support", "standards", "caseStudies", "documentation", "awards"])
     #foreach($prop in $class.properties) 
       #if($fProps.indexOf($prop.name)>=0)
         #set($prettyName = $prop.prettyName)
         #set($ovalue =  $doc.getObject("oscar.Project").getValue($prop.name))
         #if($context.action == "view")
           #if($prop.name == "awards")
             #set($awardsYaml = $doc.getValue($prop.name))
             #if($awardsYaml &amp;&amp; $awardsYaml.length() > 0)
               #set($link = "")
               #set($pattern = $regextool.compile("link:(.*)"))
               #set($matcher = $pattern.matcher($awardsYaml))
               #if ($matcher.find())
                 #set($link = $matcher.group(1))
               #end
               |=(% style="width:20%" %)$prettyName|(((
                 [[image:oscar.ProjectSheet@award.png||align=left]] (% style="margin-left: 1em;" %)$link
               )))
             #end
           #elseif($ovalue &amp;&amp; ($ovalue.trim().length() > 0 || $ovalue.size() > 0))
             |=(% style="width:20%" %)$prettyName|$doc.display($prop.name)
           #end
         #else
           |=(% style="width:20%" %)$prettyName|$doc.display($prop.name)
         #end
       #end
     #end
     #if($context.action=="view")
       #set($xwql = "from doc.object(oscar.Submission) as submission where doc.parent='$doc.fullName'")
       #set($results = $services.query.xwql($xwql).execute())
       #if($results &amp;&amp; $results.size()>0)
         #set($submission = $xwiki.getDocument($results.get(0)))
         #if($xwiki.hasAccessLevel("view", $context.user, $results.get(0)))
           |=OW2 submission|[[$doc.getValue("name")>>$submission]]
         #end
       #end
     #end
     &lt;/div>

#if($status == "mature")
     &lt;div role="tabpanel" class="tab-pane" id="forge-tools">
     #set($fProps = ["sonarId", "fossologyId", "gforgeId", "openhubId", "jiraId"])
     #set($rootUrls = {"sonarId": "http://sonar.oscar.org/dashboard/index/", "fossologyId": "http://fossology.oscar.org/?mod=license&amp;", "gforgeId": "http://forge.oscar.org/projects/", "openhubId": "https://www.openhub.net/p/", "jiraId": "http://jira.oscar.org/"})
     #foreach($prop in $class.properties) 
       #if($fProps.indexOf($prop.name)>=0)
         #set($prettyName = $prop.prettyName)
         #set($idx = $prettyName.indexOf("ID"))
         #set($prettyName = $prettyName.substring(0, $idx).trim())
         #if($context.action == "view")
           #set($rootUrl = $rootUrls.get($prop.name))
           #set($lVal = $doc.getObject("oscar.Project").getValue($prop.name))
           #if($prop.name == "sonarId" &amp;&amp; $lVal &amp;&amp; $lVal.length()>0)
             #set($lVal = $lVal.split("\|").get(1))
           #end
           #if($lVal.length()>0)
             #set($lUrl = $rootUrl+$lVal)
             |=(% style="width:20%" %)$prettyName|[[$prettyName>>$lUrl]]
           #end
         #else
         |=(% style="width:20%" %)$prettyName|$doc.display($prop.name)
         #end
       #end
     #end
#if($context.action=="view")
#set($xwql = "from doc.object(oscar.Omm) as omm where doc.space='$doc.web'")
#set($results = $services.query.xwql($xwql).execute())
#if($results &amp;&amp; $results.size()>0)
#set($omm = $xwiki.getDocument($results.get(0)))
#set($ommLcs = "#ommEqualsOneCount($omm, ['LCS-1_1', 'LCS-1_2', 'LCS-2_1', 'LCS-2_2', 'LCS-3_1', 'LCS-3_2'])")
#set($ommPdoc = "#ommEqualsOneCount($omm, ['PDOC-1_1', 'PDOC-1_2', 'PDOC-1_3', 'PDOC-2_1', 'PDOC-2_2', 'PDOC-3_1', 'PDOC-3_2', 'PDOC-3_3', 'PDOC-3_4'])")
#set($ommStd = "#ommEqualsOneCount($omm, ['STD-1_1', 'STD-1_2', 'STD-1_3', 'STD-2_1'])")
#set($ommQtp = "#ommEqualsOneCount($omm, ['QTP-1_1', 'QTP-1_2', 'QTP-1_3', 'QTP-1_4', 'QTP-2_1', 'QTP-2_2', 'QTP-3_1'])")
#set($ommEnv = "#ommEqualsOneCount($omm, ['ENV-1_1', 'ENV-1_2', 'ENV-1_3', 'ENV-2_1', 'ENV-2_2'])")
#set($ommDfct = "#ommEqualsOneCount($omm, ['DFCT-1_1', 'DFCT-1_2', 'DFCT-2_1', 'DFCT-3_1', 'DFCT-3_2', 'DFCT-4_1', 'DFCT-4_2'])")
#set($ommMst = "#ommEqualsOneCount($omm, ['MST-1_1', 'MST-1_2', 'MST-1_3', 'MST-2_1', 'MST-2_2'])")
#set($ommCm = "#ommEqualsOneCount($omm, ['CM-1_1', 'CM-1_2', 'CM-1_3', 'CM-2_1', 'CM-2_2', 'CM-3_1'])")
#set($ommPp = "#ommEqualsOneCount($omm, ['PP-1_1', 'PP-1_2', 'PP-1_3', 'PP-2_1'])")
#set($ommReqm = "#ommEqualsOneCount($omm, ['REQM-1', 'REQM-2'])")
#set($ommRdmp = "#ommEqualsOneCount($omm, ['RDMP-1', 'RDMP-2', 'RDMP-3'])")
#set($ommStk = "#ommEqualsOneCount($omm, ['STK-1_1', 'STK-1_2', 'STK-1_3', 'STK-2_1', 'STK-2_2', 'STK-2_3', 'STK-3_1', 'STK-3_2', 'STK-3_3'])")
|=Open Maturity Model|(((
[[$omm.displayTitle>>$omm]]
#set($ommLcsAvg = "#ommAverage($omm, ['LCS-1_1', 'LCS-1_2', 'LCS-2_1', 'LCS-2_2', 'LCS-3_1', 'LCS-3_2'])")
#set($ommPdocAvg = "#ommAverage($omm, ['PDOC-1_1', 'PDOC-1_2', 'PDOC-1_3', 'PDOC-2_1', 'PDOC-2_2', 'PDOC-3_1', 'PDOC-3_2', 'PDOC-3_3', 'PDOC-3_4'])")
#set($ommStdAvg = "#ommAverage($omm, ['STD-1_1', 'STD-1_2', 'STD-1_3', 'STD-2_1'])")
#set($ommQtpAvg = "#ommAverage($omm, ['QTP-1_1', 'QTP-1_2', 'QTP-1_3', 'QTP-1_4', 'QTP-2_1', 'QTP-2_2', 'QTP-3_1'])")
#set($ommEnvAvg = "#ommAverage($omm, ['ENV-1_1', 'ENV-1_2', 'ENV-1_3', 'ENV-2_1', 'ENV-2_2'])")
#set($ommDfctAvg = "#ommAverage($omm, ['DFCT-1_1', 'DFCT-1_2', 'DFCT-2_1', 'DFCT-3_1', 'DFCT-3_2', 'DFCT-4_1', 'DFCT-4_2'])")
#set($ommMstAvg = "#ommAverage($omm, ['MST-1_1', 'MST-1_2', 'MST-1_3', 'MST-2_1', 'MST-2_2'])")
#set($ommCmAvg = "#ommAverage($omm, ['CM-1_1', 'CM-1_2', 'CM-1_3', 'CM-2_1', 'CM-2_2', 'CM-3_1'])")
#set($ommPpAvg = "#ommAverage($omm, ['PP-1_1', 'PP-1_2', 'PP-1_3', 'PP-2_1'])")
#set($ommReqmAvg = "#ommAverage($omm, ['REQM-1', 'REQM-2'])")
#set($ommRdmpAvg = "#ommAverage($omm, ['RDMP-1', 'RDMP-2', 'RDMP-3'])")
#set($ommStkAvg = "#ommAverage($omm, ['STK-1_1', 'STK-1_2', 'STK-1_3', 'STK-2_1', 'STK-2_2', 'STK-2_3', 'STK-3_1', 'STK-3_2', 'STK-3_3'])")

{{html}}
&lt;div class="chart" id="omm-chart">&lt;/div>
&lt;div class="chart-legend">Average OMM score by category&lt;/div>
{{/html}}
)))
#end
|=Metrics file|&lt;a href="$doc.getAttachmentURL("metrics.json")">metrics.json&lt;/a>
#end

     &lt;/div>

     &lt;div role="tabpanel" class="tab-pane" id="risk-drivers">
#set($str = $doc.getAttachment("metrics.json").getContentAsString())
#set($metrics = $jsontool.parse($str))
#set($fossology = $metrics.fossology)
#set($sonar = $metrics.sonar.metrics)
#set($openhub = $metrics.openhub)
#set($openhubKey = $doc.getObject("oscar.Project").getValue("openhubId"))
#set($openhubSource = "https://www.openhub.net/p/"+$openhubKey)
#set($coverage = $sonar.coverage.val)
#* Recent versions of Sonar use 'overall_coverage' instead of 'coverage', it seems. *#
#if (!$coverage)
   #set($coverage = $sonar.overall_coverage.val)
   #if (!$coverage)
     #set($coverage = 0)
   #end
#end
#set($testSuccessDensity = $!sonar.test_success_density.val)
#if(!$testSuccessDensity)
  #set($testSuccessDensity = 0)
#end
&lt;div>

  &lt;ul class="nav nav-tabs" role="tablist">
    &lt;li role="presentation" class="active">&lt;a href="#licensing" aria-controls="licensing" role="tab" data-toggle="tab">Licensing&lt;/a>&lt;/li>
    &lt;li role="presentation">&lt;a href="#code" aria-controls="code" role="tab" data-toggle="tab">Code Quality&lt;/a>&lt;/li>
    &lt;li role="presentation">&lt;a href="#activeness" aria-controls="activeness" role="tab" data-toggle="tab">Activeness&lt;/a>&lt;/li>
  &lt;/ul>

  &lt;div class="tab-content">
  &lt;div role="tabpanel" class="tab-pane active" id="licensing">
(% style="margin-top:0.5em;" class="metrics-table" %)
|=(% style="width:30%" %)License|=File count|=Source
#foreach($metric in $fossology.licenses)
|$metric.name|$metric.count|[[OW2 Fossology>>http://fossology.oscar.org]]
#end

**Total files count:**  $!fossology.fileCount
  &lt;/div>

  &lt;div role="tabpanel" class="tab-pane" id="code">
(% style="margin-top:0.5em;" class="metrics-table" %)
|=(% style="width:30%" %)Metric|=Value|=Source
#foreach($key in $sonar.keySet())
#set($prettyKey = $key.replaceAll("_"," "))
#set($prettyKey = $prettyKey.replaceAll("api","API"))
#set($prettyKey = $stringtool.capitalize($prettyKey))
|$prettyKey|$!sonar.get($key).frmt_val|[[OW2 SonarQube>>http://sonar.oscar.org||target="_blank"]]
#end
  &lt;/div>
  &lt;div role="tabpanel" class="tab-pane" id="activeness">
(% style="margin-top:0.5em;" class="metrics-table" %)
|=(% style="width:30%" %)Metric|=Value|=Source
#set($openHubActivity = $openhub.activity)
#set($openHubContributors = $openhub["one-year-contributor-count"])
|OpenHub activity score|$openHubActivity|[[OpenHub>>$openhubSource]]
|OpenHub one year contributor count|$openHubContributors|[[OpenHub>>$openhubSource]]
|OMM configuration management|$!ommCm.trim()|[[$!omm.displayTitle>>$!omm]]
|OMM project planning|$!ommPp.trim()|[[$!omm.displayTitle>>$!omm]]
|OMM requirements|$!ommReqm.trim()|[[$!omm.displayTitle>>$!omm]]
|OMM roadmap|$!ommRdmp.trim()|[[$!omm.displayTitle>>$!omm]]
|OMM stakeholders|$!ommStk.trim()|[[$!omm.displayTitle>>$!omm]]
  &lt;/div>
  &lt;/div>
&lt;/div>

     &lt;/div>

&lt;div role="tabpanel" class="tab-pane" id="risk-indicators">
|=(% style="width:20%; vertical-align: middle;" %)Choose a Risk Model:|(((
#set($xwql = "from doc.object(oscar.RiskModel) as riskModel where doc.name &lt;&gt; 'RiskModelTemplate' order by riskModel.name")
#set($models = $services.query.xwql($xwql).execute())
&lt;form action="" method="POST" class="model-form">
&lt;select name="risk-model" class="model-select">
&lt;option value="" disabled>Risk Models&lt;/option>
#set($selectedModel = $request.getParameter("risk-model"))
#if(!$selectedModel)
#set($selectedModel = "oscar.oscar-risk-model")
#end
#foreach($model in $models)
#set ($selected = "")
#if ($model == $selectedModel)
#set ($selected = "selected")
#end
#set($mdoc = $xwiki.getDocument($model))
&lt;option value="$model" $selected>$mdoc.displayTitle&lt;/option>
#end
&lt;/select>
[[info>>oscar.risk-models]]
&lt;/form>
)))|(% style="text-align: right;" %)[[[[image:oscar.DashboardAppAssets@riscoss-small.png||width="150px"]]&gt;&gt;http://riscoss.eu/||target="_blank"]] 

&lt;div class="chart" id="risk-chart">&lt;/div>

|=(% style="width:20%" %) |=(% style="width:50%" %)Indicators &lt;span class="glyphicon glyphicon-info-sign" data-container="body" data-placement="right" data-toggle="popover" id="indicators-info" data-original-title="" title="">&lt;/span>|=Computed Score &lt;span class="glyphicon glyphicon-info-sign" data-container="body" data-placement="right" data-toggle="popover" id="compute-info" data-original-title="" title="">&lt;/span>
|=License risk &lt;span class="glyphicon glyphicon-info-sign" data-container="body" data-placement="right" data-toggle="popover" id="license-risk-info" data-original-title="" title="">&lt;/span>|(((
||Value|Normalized &lt;span class="glyphicon glyphicon-info-sign" data-container="body" data-placement="right" data-toggle="popover" id="normalized-info-1" data-original-title="" title="">&lt;/span>
|Unique license|$!fossology.licenses.size()|&lt;span class="unique-licenses-tagged">&lt;/span>
#set($ratioNoLicense = $mathtool.div($!fossology.noLicenseCount,$!fossology.fileCount))
#set($ratioNoLicense = $mathtool.roundTo(2, $ratioNoLicense))
#set($ratioNoLicensePercent = $mathtool.mul(100, $ratioNoLicense))
|Ratio no license|$ratioNoLicensePercent%|&lt;span class="ratio-no-license-tagged">&lt;/span>
#set($ommLcs = $mathtool.toInteger($!ommLcs.trim()))
|OMM License Indicator|$ommLcs|&lt;span class="omm-license-tagged">&lt;/span>
)))|&lt;span class="licenseScore">&lt;/span>
|=Quality risk &lt;span class="glyphicon glyphicon-info-sign" data-container="body" data-placement="right" data-toggle="popover" id="quality-risk-info" data-original-title="" title="">&lt;/span>|(((
||Value|Normalized &lt;span class="glyphicon glyphicon-info-sign" data-container="body" data-placement="right" data-toggle="popover" id="normalized-info-2" data-original-title="" title="">&lt;/span>
|Blocker issues|$!sonar.blocker_violations.val|&lt;span class="blocker-issues-tagged">&lt;/span>
|Critical issues|$!sonar.critical_violations.val|&lt;span class="critical-issues-tagged">&lt;/span>
|Test coverage|$!sonar.coverage.frmt_val $!sonar.overall_coverage.frmt_val|&lt;span class="test-coverage-tagged">&lt;/span>
|Test success|$!sonar.test_success_density.frmt_val|&lt;span class="test-success-tagged">&lt;/span>
#set($ommPdoc = $mathtool.toInteger($!ommPdoc.trim()))
|OMM documentation|$ommPdoc|&lt;span class="omm-pdoc-tagged">&lt;/span>
#set($ommStd = $mathtool.toInteger($!ommStd.trim()))
|OMM standards|$ommStd|&lt;span class="omm-std-tagged">&lt;/span>
#set($ommQtp = $mathtool.toInteger($!ommQtp.trim()))
|OMM testing process|$ommQtp|&lt;span class="omm-qtp-tagged">&lt;/span>
#set($ommEnv = $mathtool.toInteger($!ommEnv.trim()))
|OMM software environment|$ommEnv|&lt;span class="omm-env-tagged">&lt;/span>
#set($ommDfct = $mathtool.toInteger($!ommDfct.trim()))
|OMM commits and bug reports|$ommDfct|&lt;span class="omm-dfct-tagged">&lt;/span>
#set($ommMst = $mathtool.toInteger($!ommMst.trim()))
|OMM maintainability and stability|$ommMst|&lt;span class="omm-mst-tagged">&lt;/span>
)))|&lt;span class="qualityScore">&lt;/span>
|=Activeness risk &lt;span class="glyphicon glyphicon-info-sign" data-container="body" data-placement="right" data-toggle="popover" id="activity-risk-info" data-original-title="" title="">&lt;/span>|(((
||Value|Normalized &lt;span class="glyphicon glyphicon-info-sign" data-container="body" data-placement="right" data-toggle="popover" id="normalized-info-3" data-original-title="" title="">&lt;/span>
|OpenHub activity|$!openhub.activity|&lt;span class="openhub-activity">&lt;/span>
|OpenHub contributor count (1 year)|$!openhub["one-year-contributor-count"]|&lt;span class="openhub-one-year-contributor-count">&lt;/span>
#set($ommCm = $mathtool.toInteger($!ommCm.trim()))
|OMM configuration management|$ommCm|&lt;span class="omm-cm">&lt;/span>
#set($ommPp = $mathtool.toInteger($!ommPp.trim()))
|OMM project planning|$ommPp|&lt;span class="omm-pp">&lt;/span>
#set($ommReqm = $mathtool.toInteger($!ommReqm.trim()))
|OMM requirements|$ommReqm|&lt;span class="omm-reqm">&lt;/span>
#set($ommRdmp = $mathtool.toInteger($!ommRdmp.trim()))
|OMM roadmap|$ommRdmp|&lt;span class="omm-rdmp">&lt;/span>
#set($ommStk = $mathtool.toInteger($!ommStk.trim()))
|OMM stakeholders|$ommStk|&lt;span class="omm-stk">&lt;/span>
)))|&lt;span class="activenessScore">&lt;/span>



&lt;script type="text/javascript">
require(['jquery', 'bootstrap'], function($) {
  #*** HASH MANAGEMENT ***#
  var hash = window.location.hash;
  hash &amp;&amp; $('ul.nav a[href="' + hash + '"]').tab('show');
  $('.nav-tabs a').click(function (e) {
    $(this).tab('show');
    var scrollmem = $('body').scrollTop();
    window.location.hash = this.hash;
    $('html,body').scrollTop(scrollmem);
  });

  #*** POPOVERS ***#
  $('#indicators-info').popover({trigger: 'hover click', content: "The risk drivers are obtained by running quality analysis tools to the project artefacts, such as Fossology or SonarQube. The detailed list of risk drivers with their values and sources is available from the &lt;em>Risk Drivers&lt;/em> tab.", html: true});
  $('#compute-info').popover({trigger: 'hover click', content: "The scores are computed by applying risk models to risk driver values. The risk formulas are available from each risk model's page from the 'info' link next to the risk selection box at the top of this page.", html: true});
  #set($normalizationInfo = "The normalized values are an adjustement of the absolute values measured on different scales to a common scale defined by the risk model in use.")
  $('#license-risk-info').popover({trigger: 'hover click', content: "The license risk refers to the number and the diversity of software licenses included in the source code, raising possible incompatibility issues.", html: true});
  $('#quality-risk-info').popover({trigger: 'hover click', content: "This type of risk refers to possible presence of bugs in the code due to either the size of the repository (difficult to be kept under control), or to a high open/closed issue ratio, which may mean low effectiveness in closing bugs.", html: true});
  $('#activity-risk-info').popover({trigger: 'hover click', content: "This risk refers to the activeness of the project developers (contributors), their responsiveness in the issue tracker and the stability of the project (including project age).", html: true});
  $('#normalized-info-1').popover({trigger: 'hover click', content: "$normalizationInfo", html: true});
  $('#normalized-info-2').popover({trigger: 'hover click', content: "$normalizationInfo", html: true});
  $('#normalized-info-3').popover({trigger: 'hover click', content: "$normalizationInfo", html: true});

  #set($riskModelId = "oscar.oscar-risk-model")
  #if($request.getParameter("risk-model"))
    #set($riskModelId = $request.getParameter("risk-model"))  
  #end

  var TAGGING = {};

  #set($riskModelDoc = $xwiki.getDocument($riskModelId))
  #set($riskModel = $riskModelDoc.getObject("oscar.RiskModel"))
  #set($norm = $riskModel.getValue("norm").trim())
  #set($norm = $norm.split('\n'))
  #foreach($inorm in $norm) 
     #set($tag = $inorm.trim().split('\|'))
     TAGGING["$tag[1]"] = $tag[2];
  #end

  console.log('>> TAGGING', TAGGING);

  function normalize(value, taggingKey, reverse) {
    if (reverse === undefined)
      reverse = false;
    console.log('>>> VALUE', value, 'key: ' + taggingKey, 'reverse: ' + reverse);
    var intervals = TAGGING[taggingKey];
    for (var i = 0; i &lt; intervals.length - 1; i++) {
      if (intervals[i] &lt;= value &amp;&amp; value &lt;= intervals[i + 1]) {
        var normalized = i;
        if (reverse)
          return (intervals.length - 1) - normalized;
        else
          return normalized;
      }
    }
    return undefined;
  }

  $riskModel.getValue("computeLicenseScore").trim()
  $riskModel.getValue("computeQualityScore").trim()
  $riskModel.getValue("computeActivityScore").trim();

  #* LICENSES *#
  $('.unique-licenses-tagged').text(normalize($fossology.licenses.size(), "unique-licenses"));
  $('.ratio-no-license-tagged').text(normalize($ratioNoLicense*100, "ratio-no-license"));
  $('.omm-license-tagged').text(normalize($ommLcs, "omm-license"));
  var licenseScore = computeLicenseRisk($fossology.licenses.size(), $fossology.noLicenseCount, $fossology.fileCount, $ommLcs); 
  $('.licenseScore').text(licenseScore.toFixed(1));

  #* QUALITY *#
  #set($sonarBlockerViolations = 0)
  #if($sonar &amp;&amp; $sonar.blocker_violations)
    #set($sonarBlockerViolations = $sonar.blocker_violations.val)
  #end
  #set($sonarCriticalViolations = 0)
  #if($sonar &amp;&amp; $sonar.critical_violations)
    #set($sonarCriticalViolations = $sonar.critical_violations.val)
  #end
  $('.blocker-issues-tagged').text(normalize($sonarBlockerViolations, "blocker-issues"));
  $('.critical-issues-tagged').text(normalize($sonarCriticalViolations, "critical-issues"));
  $('.test-coverage-tagged').text(normalize($coverage, "test-coverage", true));
  $('.test-success-tagged').text(normalize($testSuccessDensity, "test-success", true));
  $('.omm-pdoc-tagged').text(normalize($ommPdoc, "omm-pdoc"));
  $('.omm-env-tagged').text(normalize($ommEnv, "omm-env"));
  $('.omm-qtp-tagged').text(normalize($ommQtp, "omm-qtp"));
  $('.omm-std-tagged').text(normalize($ommStd, "omm-std"));
  $('.omm-dfct-tagged').text(normalize($ommDfct, "omm-dfct"));
  $('.omm-mst-tagged').text(normalize($ommMst, "omm-mst"));


  #* ACTIVENESS *#
  $('.openhub-activity').text(normalize($openHubActivity, "openhub-activity", true));
  $('.openhub-one-year-contributor-count').text(normalize($openHubContributors, "openhub-one-year-contributor-count", true));
  $('.omm-cm').text(normalize($ommCm, "omm-cm"));
  $('.omm-pp').text(normalize($ommPp, "omm-pp"));
  $('.omm-reqm').text(normalize($ommReqm, "omm-reqm"));
  $('.omm-rdmp').text(normalize($ommRdmp, "omm-rdmp"));
  $('.omm-stk').text(normalize($ommStk, "omm-stk"));

  var qualityScore = computeCodeQualityRisk($sonarBlockerViolations, $sonarBlockerViolations, $coverage, $testSuccessDensity, $!ommPdoc, $!ommStd, $!ommQtp, $!ommEnv, $!ommDfct, $!ommMst); 
  $('.qualityScore').text(qualityScore.toFixed(1));
  var activenessScore = computeActivenessRisk($openHubActivity, $openHubContributors, $!ommCm, $!ommPp, $!ommReqm, $!ommRdmp, $!ommStk); 
  console.log('>>> Activeness score:', activenessScore);
  $('.activenessScore').text(activenessScore.toFixed(1));

  $('select.model-select').on('change', function() {
    if (this.value) {
      $('form.model-form').submit();
    }
  });
});
&lt;/script>

$!xwiki.jsx.use("Macros.d3js", {"minify":false})

&lt;script type="text/javascript">

document.observe('d3:loaded', function() {

  setTimeout(createOmmChart, 500);
  setTimeout(createRiskChart, 500);

  function createRiskChart() {

    var names = ['License Risk', 'Quality Risk', 'Activeness Risk'],
      chart, width = 400, bar_height = 30, height = bar_height * names.length;

    var licenseScore = Number(d3.select('.licenseScore').text());
    var qualityScore = d3.select('.qualityScore').text();
    var activenessScore = d3.select('.activenessScore').text();
  
    var data = [licenseScore, qualityScore, activenessScore];

    var left_width = 150;
    var x, y;

    x = d3.scale.linear()
        .domain([0, 4])
        .range([0, width]);

    var gap = 10;

    y = d3.scale.ordinal()
        .domain(data)
        .rangeBands([0, (bar_height + 2 * gap) * names.length]);

    chart = d3.select('#risk-chart')
           .append('svg')
           .attr('class', 'chart')
           .attr('width', left_width + width + 40)
           .attr('height', (bar_height + gap * 2) * names.length + 30)
           .append("g")
           .attr("transform", "translate(10, 20)");

    chart.selectAll("line")
      .data(x.ticks(4))
      .enter().append("line")
      .attr("x1", function(d) {
        return x(d) + left_width;
      })
      .attr("x2", function(d) {
        return x(d) + left_width;
      })
      .attr("y1", 0)
      .attr("y2", (bar_height + gap * 2) * names.length - gap*2);

    chart.selectAll(".rule")
      .data(x.ticks(4))
      .enter().append("text")
      .attr("class", "rule")
      .attr("x", function(d) {
        return x(d) + left_width;
      })
      .attr("y", 0)
      .attr("dy", -6)
      .attr("text-anchor", "middle")
      .attr("font-size", 10)
      .text(String);

    chart.selectAll("rect")
      .data(data)
      .enter().append("rect")
      .attr("x", left_width)
      .attr("y", function(d, i) {
        return i*bar_height + (i+1)*gap;
      })
      .attr("width", x)
      .attr("height", bar_height);

    chart.selectAll("text.score")
      .data(data)
      .enter().append("text")
      .attr("x", function(d) {
        return x(d) + left_width;
      })
      .attr("y", function(d, i) {
        return i*bar_height + (i+1)*gap+bar_height/2;
      })
      .attr("dx", -5)
      .attr("dy", ".36em")
      .attr("text-anchor", "end")
      .attr('class', 'score')
      .text(Number);

    chart.selectAll("text.name")
      .data(names)
      .enter().append("text")
      .attr("x", 0)
      .attr("y", function(d, i) {
        return i*bar_height + (i+1)*gap+bar_height/2;
      })
      .attr("dy", ".36em")
      .attr("text-anchor", "start")
      .attr('class', 'name')
      .text(String);
  };

  function createOmmChart() {

    var names = ['Documentation', 'Standards', 'Testing process', 'Licenses and IP', 'Environment', 'Commits and bug reports', 'Maintainability', 'Configuration management', 'Project planning', 'Requirements management', 'Roadmap management', 'Stakeholders involvement'],
      chart, width = 400, bar_height = 30, height = bar_height * names.length;
    
    var data = [$ommPdocAvg, $ommStdAvg, $ommQtpAvg, $ommLcsAvg, $ommEnvAvg, $ommDfctAvg, $ommMstAvg, $ommCmAvg, $ommPpAvg, $ommReqmAvg, $ommRdmpAvg, $ommStkAvg ];

    var left_width = 250;
    var x, y;

    x = d3.scale.linear()
        .domain([0, 4])
        .range([0, width]);

    var gap = 10;

    y = d3.scale.ordinal()
        .domain(data)
        .rangeBands([0, (bar_height + 2 * gap) * names.length]);

    chart = d3.select('#omm-chart')
           .append('svg')
           .attr('class', 'chart')
           .attr('width', left_width + width + 40)
           .attr('height', (bar_height + gap * 2) * names.length - gap * (names.length) + gap * 3)
           .append("g")
           .attr("transform", "translate(10, 20)");

    chart.selectAll("line")
      .data(x.ticks(4))
      .enter().append("line")
      .attr("x1", function(d) {
        return x(d) + left_width;
      })
      .attr("x2", function(d) {
        return x(d) + left_width;
      })
      .attr("y1", 0)
      .attr("y2", (bar_height + gap * 2) * names.length - gap * names.length + gap * 2);

    chart.selectAll(".rule")
      .data(x.ticks(4))
      .enter().append("text")
      .attr("class", "rule")
      .attr("x", function(d) {
        return x(d) + left_width;
      })
      .attr("y", 0)
      .attr("dy", -6)
      .attr("text-anchor", "middle")
      .attr("font-size", 10)
      .text(String);

    chart.selectAll("rect")
      .data(data)
      .enter().append("rect")
      .attr("x", left_width)
      .attr("y", function(d, i) {
        return i*bar_height + (i+1)*gap;
      })
      .attr("width", x)
      .attr("height", bar_height);

    chart.selectAll("text.score")
      .data(data)
      .enter().append("text")
      .attr("x", function(d) {
        return x(d) + left_width;
      })
      .attr("y", function(d, i) {
        return i*bar_height + (i+1)*gap+bar_height/2;
      })
      .attr("dx", -5)
      .attr("dy", ".36em")
      .attr("text-anchor", "end")
      .attr('class', 'score')
      .text(Number);

    chart.selectAll("text.name")
      .data(names)
      .enter().append("text")
      .attr("x", 0)
      .attr("y", function(d, i) {
        return i*bar_height + (i+1)*gap+bar_height/2;
      })
      .attr("dy", ".36em")
      .attr("text-anchor", "start")
      .attr('class', 'name')
      .text(String);
  };
  
});
&lt;/script>
#end


&lt;/div>

  &lt;/div>
&lt;/div>

{{/html}}

{{/velocity}}</content>
  <attachment>
    <filename>award.png</filename>
    <author>xwiki:XWiki.sl</author>
    <date>1466020073000</date>
    <version>1.1</version>
    <comment/>
    <content></content>
    <filesize>7164</filesize>
  </attachment>
</xwikidoc>